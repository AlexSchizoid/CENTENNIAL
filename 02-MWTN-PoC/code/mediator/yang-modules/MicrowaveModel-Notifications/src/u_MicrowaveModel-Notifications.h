
#ifndef _H_u_MicrowaveModel_Notifications
#define _H_u_MicrowaveModel_Notifications
/* 
 * Copyright (c) 2008-2012, Andy Bierman, All Rights Reserved.
 *
 * Unless required by applicable law or agreed to in writing,
 * software distributed under the License is distributed on an
 * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
 * KIND, either express or implied.  See the License for the
 * specific language governing permissions and limitations
 * under the License.
 *

*** Generated by yangdump 2.5-5

    User SIL header
    module MicrowaveModel-Notifications
    revision 2016-03-20
    namespace uri:onf:MicrowaveModel-Notifications

 */

#include <xmlstring.h>

#include "agt.h"
#include "agt_cb.h"
#include "agt_not.h"
#include "dlq.h"
#include "ncxtypes.h"
#include "op.h"
#include "rpc.h"
#include "ses.h"
#include "status.h"
#include "val.h"
#include "y_MicrowaveModel-Notifications.h"

#ifdef __cplusplus
extern "C" {
#endif

/* notification /ObjectCreationNotification */
typedef struct y_MicrowaveModel_Notifications_T_ObjectCreationNotification_ {
    uint64 counter;
    xmlChar *timeStamp;
    xmlChar *objectId;
} y_MicrowaveModel_Notifications_T_ObjectCreationNotification;

/* notification /ObjectDeletionNotification */
typedef struct y_MicrowaveModel_Notifications_T_ObjectDeletionNotification_ {
    uint64 counter;
    xmlChar *timeStamp;
    xmlChar *objectId;
} y_MicrowaveModel_Notifications_T_ObjectDeletionNotification;

/* notification /AttributeValueChangedNotification */
typedef struct y_MicrowaveModel_Notifications_T_AttributeValueChangedNotification_ {
    uint64 counter;
    xmlChar *timeStamp;
    xmlChar *objectId;
    xmlChar *attributeName;
    xmlChar *newValue;
} y_MicrowaveModel_Notifications_T_AttributeValueChangedNotification;

/* notification /ProblemNotification */
typedef struct y_MicrowaveModel_Notifications_T_ProblemNotification_ {
    uint64 counter;
    xmlChar *timeStamp;
    xmlChar *objectID;
    xmlChar *problem;
    xmlChar *severity;
} y_MicrowaveModel_Notifications_T_ProblemNotification;

/********************************************************************
* FUNCTION u_MicrowaveModel_Notifications_ObjectCreationNotification_send
* 
* Send a u_MicrowaveModel_Notifications_ObjectCreationNotification notification
* Called by your code when notification event occurs
* 
********************************************************************/
extern void u_MicrowaveModel_Notifications_ObjectCreationNotification_send (
    uint64 counter,
    const xmlChar *timeStamp,
    const xmlChar *objectId);


/********************************************************************
* FUNCTION u_MicrowaveModel_Notifications_ObjectDeletionNotification_send
* 
* Send a u_MicrowaveModel_Notifications_ObjectDeletionNotification notification
* Called by your code when notification event occurs
* 
********************************************************************/
extern void u_MicrowaveModel_Notifications_ObjectDeletionNotification_send (
    uint64 counter,
    const xmlChar *timeStamp,
    const xmlChar *objectId);


/********************************************************************
* FUNCTION u_MicrowaveModel_Notifications_AttributeValueChangedNotification_send
* 
* Send a u_MicrowaveModel_Notifications_AttributeValueChangedNotification notification
* Called by your code when notification event occurs
* 
********************************************************************/
extern void u_MicrowaveModel_Notifications_AttributeValueChangedNotification_send (
    uint64 counter,
    const xmlChar *timeStamp,
    const xmlChar *objectId,
    const xmlChar *attributeName,
    const xmlChar *newValue);


/********************************************************************
* FUNCTION u_MicrowaveModel_Notifications_ProblemNotification_send
* 
* Send a u_MicrowaveModel_Notifications_ProblemNotification notification
* Called by your code when notification event occurs
* 
********************************************************************/
extern void u_MicrowaveModel_Notifications_ProblemNotification_send (
    uint64 counter,
    const xmlChar *timeStamp,
    const xmlChar *objectID,
    const xmlChar *problem,
    const xmlChar *severity);

/********************************************************************
* FUNCTION u_MicrowaveModel_Notifications_init
* 
* initialize the MicrowaveModel-Notifications server instrumentation library
* 
* INPUTS:
*    modname == requested module name
*    revision == requested version (NULL for any)
* 
* RETURNS:
*     error status
********************************************************************/
extern status_t u_MicrowaveModel_Notifications_init (
    const xmlChar *modname,
    const xmlChar *revision);

/********************************************************************
* FUNCTION u_MicrowaveModel_Notifications_init2
* 
* SIL init phase 2: non-config data structures
* Called after running config is loaded
* 
* RETURNS:
*     error status
********************************************************************/
extern status_t u_MicrowaveModel_Notifications_init2 (void);

/********************************************************************
* FUNCTION u_MicrowaveModel_Notifications_cleanup
*    cleanup the server instrumentation library
* 
********************************************************************/
extern void u_MicrowaveModel_Notifications_cleanup (void);

#ifdef __cplusplus
} /* end extern 'C' */
#endif

#endif