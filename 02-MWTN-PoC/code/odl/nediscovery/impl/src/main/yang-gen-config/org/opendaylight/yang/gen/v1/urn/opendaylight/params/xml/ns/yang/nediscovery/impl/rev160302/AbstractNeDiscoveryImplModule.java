/*
* Generated file
*
* Generated from: yang module name: nediscovery-impl yang module local name: nediscovery-impl
* Generated by: org.opendaylight.controller.config.yangjmxgenerator.plugin.JMXGenerator
* Generated at: Sat Apr 16 11:58:59 IST 2016
*
* Do not modify this file unless it is present under src/main directory
*/
package org.opendaylight.yang.gen.v1.urn.opendaylight.params.xml.ns.yang.nediscovery.impl.rev160302;
@org.opendaylight.yangtools.yang.binding.annotations.ModuleQName(namespace = "urn:opendaylight:params:xml:ns:yang:nediscovery:impl", name = "nediscovery-impl", revision = "2016-03-02")

public abstract class AbstractNeDiscoveryImplModule extends org.opendaylight.controller.config.spi.AbstractModule<AbstractNeDiscoveryImplModule> implements org.opendaylight.yang.gen.v1.urn.opendaylight.params.xml.ns.yang.nediscovery.impl.rev160302.NeDiscoveryImplModuleMXBean {
    private static final org.slf4j.Logger LOGGER = org.slf4j.LoggerFactory.getLogger(org.opendaylight.yang.gen.v1.urn.opendaylight.params.xml.ns.yang.nediscovery.impl.rev160302.AbstractNeDiscoveryImplModule.class);

    //attributes start

    public static final org.opendaylight.controller.config.api.JmxAttribute netconfconnectorServiceJmxAttribute = new org.opendaylight.controller.config.api.JmxAttribute("NetconfconnectorService");
    private javax.management.ObjectName netconfconnectorService; // mandatory

    public static final org.opendaylight.controller.config.api.JmxAttribute brokerJmxAttribute = new org.opendaylight.controller.config.api.JmxAttribute("Broker");
    private javax.management.ObjectName broker; // mandatory

    //attributes end

    public AbstractNeDiscoveryImplModule(org.opendaylight.controller.config.api.ModuleIdentifier identifier,org.opendaylight.controller.config.api.DependencyResolver dependencyResolver) {
        super(identifier, dependencyResolver);
    }

    public AbstractNeDiscoveryImplModule(org.opendaylight.controller.config.api.ModuleIdentifier identifier,org.opendaylight.controller.config.api.DependencyResolver dependencyResolver,AbstractNeDiscoveryImplModule oldModule,java.lang.AutoCloseable oldInstance) {
        super(identifier, dependencyResolver, oldModule, oldInstance);
    }

    @Override
    public void validate() {
        dependencyResolver.validateDependency(org.opendaylight.yang.gen.v1.urn.opendaylight.params.xml.ns.yang.netconfconnector.api.rev160302.NetconfConnectorServiceServiceInterface.class, netconfconnectorService, netconfconnectorServiceJmxAttribute);
        dependencyResolver.validateDependency(org.opendaylight.controller.config.yang.md.sal.binding.BindingAwareBrokerServiceInterface.class, broker, brokerJmxAttribute);

        customValidation();
    }

    protected void customValidation() {
    }

    private org.opendaylight.wtg.netconfconnector.api.NetconfConnectorService netconfconnectorServiceDependency;
    protected final org.opendaylight.wtg.netconfconnector.api.NetconfConnectorService getNetconfconnectorServiceDependency(){
        return netconfconnectorServiceDependency;
    }private org.opendaylight.controller.sal.binding.api.BindingAwareBroker brokerDependency;
    protected final org.opendaylight.controller.sal.binding.api.BindingAwareBroker getBrokerDependency(){
        return brokerDependency;
    }

    protected final void resolveDependencies() {
        netconfconnectorServiceDependency = dependencyResolver.resolveInstance(org.opendaylight.wtg.netconfconnector.api.NetconfConnectorService.class, netconfconnectorService, netconfconnectorServiceJmxAttribute);
        brokerDependency = dependencyResolver.resolveInstance(org.opendaylight.controller.sal.binding.api.BindingAwareBroker.class, broker, brokerJmxAttribute);
    }

    public boolean canReuseInstance(AbstractNeDiscoveryImplModule oldModule){
        // allow reusing of old instance if no parameters was changed
        return isSame(oldModule);
    }

    public java.lang.AutoCloseable reuseInstance(java.lang.AutoCloseable oldInstance){
        // implement if instance reuse should be supported. Override canReuseInstance to change the criteria.
        return oldInstance;
    }

    public boolean isSame(AbstractNeDiscoveryImplModule other) {
        if (other == null) {
            throw new IllegalArgumentException("Parameter 'other' is null");
        }
        if (java.util.Objects.deepEquals(netconfconnectorService, other.netconfconnectorService) == false) {
            return false;
        }
        if(netconfconnectorService!= null) {
            if (!dependencyResolver.canReuseDependency(netconfconnectorService, netconfconnectorServiceJmxAttribute)) { // reference to dependency must be reusable as well
                return false;
            }
        }
        if (java.util.Objects.deepEquals(broker, other.broker) == false) {
            return false;
        }
        if(broker!= null) {
            if (!dependencyResolver.canReuseDependency(broker, brokerJmxAttribute)) { // reference to dependency must be reusable as well
                return false;
            }
        }

        return true;
    }

    @Override
    public boolean equals(Object o) {
        if (this == o) return true;
        if (o == null || getClass() != o.getClass()) return false;
        AbstractNeDiscoveryImplModule that = (AbstractNeDiscoveryImplModule) o;
        return identifier.equals(that.identifier);
    }

    @Override
    public int hashCode() {
        return identifier.hashCode();
    }

    // getters and setters
    @Override
    public javax.management.ObjectName getNetconfconnectorService() {
        return netconfconnectorService;
    }

    @Override
    @org.opendaylight.controller.config.api.annotations.RequireInterface(value = org.opendaylight.yang.gen.v1.urn.opendaylight.params.xml.ns.yang.netconfconnector.api.rev160302.NetconfConnectorServiceServiceInterface.class)
    public void setNetconfconnectorService(javax.management.ObjectName netconfconnectorService) {
        this.netconfconnectorService = netconfconnectorService;
    }

    @Override
    public javax.management.ObjectName getBroker() {
        return broker;
    }

    @Override
    @org.opendaylight.controller.config.api.annotations.RequireInterface(value = org.opendaylight.controller.config.yang.md.sal.binding.BindingAwareBrokerServiceInterface.class)
    public void setBroker(javax.management.ObjectName broker) {
        this.broker = broker;
    }

    public org.slf4j.Logger getLogger() {
        return LOGGER;
    }

}
