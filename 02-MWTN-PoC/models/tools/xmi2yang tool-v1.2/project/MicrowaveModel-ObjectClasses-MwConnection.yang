module MicrowaveModel-ObjectClasses-MwConnection {
    namespace "urn:onf:MicrowaveModel-ObjectClasses-MwConnection";
    prefix MicrowaveModel-ObjectClasses-MwConnection;
    import CoreModel-CoreNetworkModule-ObjectClasses {
        prefix CoreModel-CoreNetworkModule-ObjectClasses;
    }
    import MicrowaveModel-TypeDefinitions {
        prefix MicrowaveModel-TypeDefinitions;
    }
    list MW_AirInterface_Pac {
        config true;
        ordered-by system;
        uses MW_AirInterface_Pac;
    }
    grouping MW_AirInterface_Pac {
        status deprecated;
        list airInterfaceCapabilityList {
            config true;
            ordered-by system;
            uses AirInterfaceCapability;
            min-elements 1;
        }
        container airInterfaceConfiguration {
            config true;
            uses AirInterfaceConfiguration;
        }
        container airInterfaceStatus {
            config true;
            uses AirInterfaceStatus;
        }
        leaf-list airInterfaceCurrentProblemList {
            ordered-by system;
            type leafref {
                path '/AirInterfaceCurrentProblem/undefined';
            }
        }
        leaf airInterfaceCurrentPerformance {
            type leafref {
                path '/AirInterfaceCurrentPerformance/undefined';
            }
        }
        leaf-list airInterfaceHistoricalPerformanceList {
            ordered-by system;
            type leafref {
                path '/AirInterfaceHistoricalPerformance/undefined';
            }
        }
        leaf layerprotocol {
            type leafref {
                path '/CoreModel-CoreNetworkModule-ObjectClasses:NetworkControlDomain/networkElementRefList/ltpRefList/lpList/layerProtocolName';
            }
        }
        leaf layerProtocol {
            type leafref {
                path '/CoreModel-CoreNetworkModule-ObjectClasses:NetworkControlDomain/networkElementRefList/ltpRefList/lpList/layerProtocolName';
            }
        }
    }
    grouping AirInterfaceCapability {
        status deprecated;
        leaf typeOfEquipment {
            type string;
            description "This parameter indicates the equipment type.
Instead of uploading the complete set of capabilities, capabilities of the same equipment type could be reused.";
        }
        leaf channelPlanId {
            type _S76W8Hf2EeW-h9gN8LYm4Q;
            config false;
            description "Unique identifier of the international agreement that describes the allocating of frequency channels, to which this Air Interface Port complies. The Microwave Extension shall define the exact names of the references as an enum.
Applying this field for reducing the number of sub-messages requires a corresponding channel plan to be stored in the controller.";
        }
        leaf txFrequencyMin {
            type uint64;
            config false;
            description "Value of the minimum transmit frequency tunable at the air interface. The value shall be expressed in kHz.
This value is only relevant, if the channel plan, which is referenced in channelPlanID is stored in the controller.";
        }
        leaf txFrequencyMax {
            type uint64;
            config false;
            description "Value of the maximum transmit frequency tunable at the air interface. The value shall be expressed in kHz.
This value is only relevant, if the channel plan, which is referenced in channelPlanID is stored in the controller.";
        }
        leaf rxFrequencyMin {
            type uint64;
            config false;
            description "Value of the minimum receive frequency tunable at the air interface. The value shall be expressed in kHz.
This value is only relevant, if the channel plan, which is referenced in channelPlanID is stored in the controller.";
        }
        leaf rxFrequencyMax {
            type uint64;
            config false;
            description "Value of the maximum receive frequency tunable at the air interface. The value shall be expressed in kHz.
This value is only relevant, if the channel plan, which is referenced in channelPlanID is stored in the controller.";
        }
        leaf duplexDistance {
            type uint64;
            config false;
            description "Distance between transmitted and received frequency. The value shall be expressed in kHz.";
        }
        leaf duplexDistanceVariable {
            type boolean;
            config false;
            description "'1' in case the distance between transmitted and received frequency is variable.";
        }
        leaf adaptiveModulationIsAvail {
            type boolean;
            config false;
            description "In case the Air Interface Port is capable of adaptive modulation, this field shall contain an “1”.";
        }
        leaf mimoIsAvail {
            type boolean;
            config false;
            description "In case the device is capable of MIMO, this field shall contain an “1”.";
        }
        leaf mimoChannels {
            type uint8 {
                range 1..4;
            }
            config false;
            description "Maximum number (n) of Air Interfaces that can be combined to a n x n MIMO configuration.";
        }
        leaf afrIsAvail {
            type boolean {
                range 1..4;
            }
            config false;
            description "In case the microwave radio is capable of Advanced Frequency Reuse (canceling of interference cause by transmitters located at the same site), this field shall contain an “1”.";
        }
        leaf atpcIsAvail {
            type boolean {
                range 1..4;
            }
            config false;
            description "In case the microwave radio is capable of ATPC, this field shall contain an “1”.";
        }
        leaf atpcRange {
            type uint8 {
                range 1..4;
            }
            config false;
            description "Extent of the ATPC range in dB. 
The value should be set to 0 in case ATPC feature bit is 0.
";
        }
        leaf autoFreqSelectIsAvail {
            type boolean {
                range 1..4;
            }
            config false;
            description "In case the microwave radio is capable of automatically selecting the transmit frequency in unlicensed bands, this field shall contain an “1”.";
        }
        leaf loopBackIsAvail {
            type boolean {
                range 1..4;
            }
            config false;
            description "In case the radio is capable of looping back header information of the air interface, this field shall contain an “1”.";
        }
        leaf maintenanceTimerRange {
            type string {
                range 1..4;
            }
            config false;
            description "The device shall describe the range of the configurable time of existence of any maintenance configuration (e.g. the loop back of microwave header information).
A list of values shall be separated by commas.
A value range shall be expressed by two values separated by a minus._unit:seconds";
        }
        leaf supportedAlarms {
            type string {
                range 1..4;
            }
            config false;
            description "Available alarms to be listed.
Mandatory:'aiConfigurationIsFaulty','signalIsLost','rslIsExceeded','temperatureIsExceeded','modemIsFaulty','radioIsFaulty' and 'modulationIsDownShifted'.
Names are to be separated by commas.
Further alarms might be added by the device.";
        }
        list scriptList {
            ordered-by system;
            uses Script;
            min-elements 1;
        }
    }
    grouping Script {
        status deprecated;
        leaf channelBandwidth {
            type uint64;
            config false;
            description "Bandwidth of the transmit channel. 
The value shall be expressed explicitly (means in kHz) not as a reference to an international agreement. 
The values shall be chosen from the following _list: 3.500, 7.000, 14.000, 27.500, 28.000, 29.000, 29.650, 30.000, 40.000, 50.000, 55.000, 56.000, 59.300, 60.000, 80.000, 100.000, 112.000, 120.000, 150.000, 200.000, 250.000, 500.000, 750.000, 1.000.000, 1.250.000, 1.500.000, 1.750.000, 2.000.000;_unit:kHz";
        }
        leaf modulationScheme {
            type uint16 {
                range 1..4;
            }
            config false;
            description "Modulation scheme, which is base to the other characteristics described in the same instance of Script.
The modulation scheme shall be described by the number of symbols (e.g. BPSK->'2' or 256QAM->'256')._unit:symbols";
        }
        leaf informationRate {
            type uint8 {
                range 1..4;
            }
            config false;
            description "Information rate of the coding scheme in %._unit:%";
        }
        leaf txPowerMin {
            type uint8 {
                range 1..4;
            }
            config false;
            description "Value of the minimum transmit power the modem can operate in dBm._unit:dBm";
        }
        leaf txPowerMax {
            type uint8 {
                range 1..4;
            }
            config false;
            description "Value of the maximum transmit power the modem can operate in dBm._unit:dBm";
        }
        leaf rxThreshold {
            type uint16 {
                range 1..4;
            }
            config false;
            description "Value of the receive level (in dBm) required to decode the received signal with a Bit Error Rate of 1e-6 or less._unit:dBm";
        }
        leaf amUpshiftLevel {
            type uint16 {
                range 1..4;
            }
            config false;
            description "Value of the receive level (in dBm) that has to be exceeded to shift into a higher modulation scheme.";
        }
        leaf amDownshiftLevel {
            type uint16 {
                range 1..4;
            }
            config false;
            description "Value of the receive level (in dBm) that has to be exceeded for not shifting into a lower modulation scheme.";
        }
        leaf xpicIsAvail {
            type boolean {
                range 1..4;
            }
            config false;
            description "In case the Air Interface Port is capable of XPIC, this field shall contain an “1”.";
        }
    }
    grouping AirInterfaceConfiguration {
        leaf airInterfaceID {
            type string {
                range 1..4;
            }
            description "Operator specific microwave link ID (often used for coding area, type of element and sequential number).";
        }
        leaf radioSignalId {
            type uint16 {
                range 1..4;
            }
            description "The radioSignalId is transmitted on the air interface so the remote site of the link synchronizes on the correct transmitter.
The local radio MUST NOT synchronize on a radio signal with another radioSignalId.
The link ID is neither an ID necessary to span the model nor an ID referencing external data. It is just some sort of name of the link transmitted so the correct remote site can be identified in an interference situation.The value zero can be used to make the microwave to disable the link ID check.";
        }
        leaf txFrequency {
            type uint64;
            description "Center frequency of the transmit channel in kHz.
The values to be configured have to exactly match the values listed in the international agreement referenced in channelPlanID.
In case of automated selection of the transmit frequency this field shall describe the lowest center frequency selectable._unit:kHz";
        }
        leaf rxFrequency {
            type uint64;
            description "Center frequency of the receive channel in kHz._unit:kHz";
        }
        leaf txChannelBandwidth {
            type uint64;
            description "Bandwidth of the transmit channel. 
The value shall be expressed explicitly (means in kHz) not as a reference to an international agreement. 
The values shall be chosen from the following _list: 3.500, 7.000, 14.000, 27.500, 28.000, 29.000, 29.650, 30.000, 40.000, 50.000, 55.000, 56.000, 59.300, 60.000, 80.000, 100.000, 112.000, 120.000, 150.000, 200.000, 250.000, 500.000, 750.000, 1.000.000, 1.250.000, 1.500.000, 1.750.000, 2.000.000;_unit:kHz";
        }
        leaf rxChannelBandwidth {
            type uint64;
            description "Bandwidth of the receive channel. 
The value shall be expressed explicitly (means in kHz) not as a reference to an international agreement. 
The values shall be chosen from the following _list: 3.500, 7.000, 14.000, 27.500, 28.000, 29.000, 29.650, 30.000, 40.000, 50.000, 55.000, 56.000, 59.300, 60.000, 80.000, 100.000, 112.000, 120.000, 150.000, 200.000, 250.000, 500.000, 750.000, 1.000.000, 1.250.000, 1.500.000, 1.750.000, 2.000.000;_unit:kHz";
        }
        leaf polarization {
            type _e85NsI99EeWFluv9KLLl5A {
                range 1..4;
            }
            description "Allows to document the polarization of the air interface.";
        }
        leaf powerIsOn {
            type boolean {
                range 1..4;
            }
            description "Power ON. Activation of the entire radio in a split mount configuration shall be expressed as an “1”.";
        }
        leaf transmitterIsOn {
            type boolean {
                range 1..4;
            }
            description "Transmit Power. Activation of the transmitter inside the radio shall be expressed as an “1”.";
        }
        leaf txPower {
            type uint8 {
                range 1..4;
            }
            description "Transmit power to be configured on the microwave link. The value shall be explicitly expressed in dBm (not relative to some upper or lower end of the power range). Signed integers are required.
(The actually operated transmit power might be lower depending on adaptive modulation and ATPC.)_unit:dBm";
        }
        leaf adaptiveModulationIsOn {
            type boolean {
                range 1..4;
            }
            description "Adaptive Modulation. Activation of adaptive modulation shall be expressed as an “1”.";
        }
        leaf modulationMin {
            type uint16 {
                range 1..4;
            }
            description "Minimum modulation to be configured (in case adaptive modulation is not used, this value represents also the fixed modulation).
The modulation scheme shall be described by the number of symbols (e.g. BPSK->'2' or 256QAM->'256').
Allowed values are defined in AirInterface::Script::modulationScheme (all instances of the device)._unit:symbols";
        }
        leaf modulationMax {
            type uint16 {
                range 1..4;
            }
            description "Maximum modulation to be configured. The value of this field is only relevant, if Adaptive Modulation has been activated.
The modulation scheme shall be described by the number of symbols (e.g. BPSK->'2' or 256QAM->'256').
Allowed values are defined in AirInterface::Script::modulationScheme (all instances of the device)._unit:symbols";
        }
        leaf xpicIsOn {
            type boolean {
                range 1..4;
            }
            description "XPIC. Activation of Cross Polarization Interference Cancellation shall be expressed as an “1”.";
        }
        leaf xpicAi {
            type leafref {
                path '/MW_AirInterface_Pac/undefined';
                range 1..4;
            }
            description "Second Air Interface of the XPIC configuration.";
        }
        leaf mimoIsOn {
            type boolean {
                range 1..4;
            }
            description "Activation of Multiple Input Multiple Output shall be expressed as an “1”.";
        }
        leaf-list mimoAiList {
            description "List of Air Interfaces belonging to the MIMO configuration.";
            ordered-by system;
            type leafref {
                path '/MW_AirInterface_Pac/undefined';
                range 1..4;
            }
        }
        leaf afrIsOn {
            type boolean {
                range 1..4;
            }
            description "Activation of Advanced Frequency Reuse shall be expressed as an “1”.";
        }
        leaf atpcIsOn {
            type boolean {
                range 1..4;
            }
            description "ATPC. Activation of Automated Transmit Power Control shall be expressed as an “1”.";
        }
        leaf atpcThreshUpper {
            type uint16 {
                range 1..4;
            }
            description "If the receive level is higher than the upper threshold value, the transmitter is notified to decrease transmit power. The value shall be explicitly expressed (means in dBm). Value of this field is only relevant, if ATPC has been activated.";
        }
        leaf atpcThreshLower {
            type uint16 {
                range 1..4;
            }
            description "If the receive level is lower than the lower threshold value, the transmitter is notified to increase transmit power. The value shall be explicitly expressed (means in dBm). Value of this field is only relevant, if ATPC has been activated.";
        }
        leaf autoFreqSelectIsOn {
            type boolean {
                range 1..4;
            }
            description "Activation of automatically selecting the transmit frequency in unlicensed bands shall be expressed as an “1”.";
        }
        leaf autoFreqSelectRange {
            type uint8 {
                range 1..4;
            }
            description "Number of transmit channels (starting at the center frequency defined in txFrequency and with channel bandwidth according to txChannelBandwidth) that define the range within the transmit frequency can automatically been chosen. ";
        }
        leaf modulationIsOn {
            type boolean {
                range 1..4;
            }
            description "Maintenance FeatureDe-activation of the modulation of the carrier signal for fault management shall be expressed as an “0”.";
        }
        leaf loopBackIsOn {
            type boolean {
                range 1..4;
            }
            description "Maintenance FeatureIf this attribute is set to '1', the received IF signal is transmitted back to the remote end.";
        }
        leaf maintenanceTimer {
            type uint64;
            description "Time of existence of any maintenance configuration (e.g. the loop back of microwave header information).
Allowed values are defined in AirInterface::AirInterfaceCapability::maintenanceTimerRange.
_unit:s";
        }
        list problemSeverityList {
            description "Severity of the problem to be configured.";
            config true;
            ordered-by system;
            uses MicrowaveModel-TypeDefinitions:airInterfaceProblemType;
        }
    }
    grouping AirInterfaceStatus {
        leaf txFrequencyCur {
            type uint64;
            config false;
            description "Center frequency of the currently operated transmit channel in kHz. (Especially required in case of automated frequency selection in unlicensed bands.)";
        }
        leaf rxFrequencyCur {
            type uint64;
            config false;
            description "Center frequency of the currently operated receive channel in kHz. (Especially required in case of automated frequency selection in unlicensed bands.)";
        }
        leaf txLevelCur {
            type uint8 {
                range 1..4;
            }
            config false;
            description "Current transmit level in dBm. Signed integers are required.";
        }
        leaf rxLevelCur {
            type uint8 {
                range 1..4;
            }
            config false;
            description "Current receive level in dBm. Signed integers are required.";
        }
        leaf modulationCur {
            type uint8 {
                range 1..4;
            }
            config false;
            description "Currently operated modulation. An enum shall define a set of modulation schemes distinguished by the number of states in their phase diagram.";
        }
        leaf informationRateCur {
            type uint8 {
                range 1..4;
            }
            config false;
            description "Information rate of the currently operated coding scheme in %.";
        }
        leaf snrCur {
            type uint8 {
                range 1..4;
            }
            config false;
            description "Currently measured signal to noise ratio in dB.";
        }
        leaf xpdCur {
            type uint8 {
                range 1..4;
            }
            config false;
            description "Currently measured cross polarization discrimination in dB.";
        }
        leaf rxTempCur {
            type uint8 {
                range 1..4;
            }
            config false;
            description "Current temperature of the radio frequency power amplifier in the receiver in °Celsius. (If the temperature of the power amplifier in the receiver is not measured, the temperature inside the radio is also fine.)";
        }
        leaf operationalStatus {
            type ../OnfModel-CoreModel/CoreModel.uml#_oGqjalLNEeO75dO39GbF8Q {
                range 1..4;
            }
            config false;
            description "Current operational state of the Air Interface.";
        }
        leaf lastStatusChange {
            type date-and-time {
                range 1..4;
            }
            config false;
            description "Time the Air Interface entered its current operational status. ";
        }
        leaf radioPowerIsUp {
            type boolean {
                range 1..4;
            }
            config false;
            description "If the radio unit has power and is switched on, this shall be expressed as an “1”.";
        }
        leaf linkIsUp {
            type boolean {
                range 1..4;
            }
            config false;
            description "If connection is established to the remote site with the same linkID, this shall be expressed as an “1”.";
        }
        leaf xpicIsUp {
            type boolean {
                range 1..4;
            }
            config false;
            description "If XPIC is currently actually working (not just configured), this shall be expressed as an “1”.";
        }
        leaf mimoIsUp {
            type boolean {
                range 1..4;
            }
            config false;
            description "If MIMO is currently actually working (not just configured), this shall be expressed as an “1”.";
        }
        leaf afrIsUp {
            type boolean {
                range 1..4;
            }
            config false;
            description "If AFR is currently actually working (not just configured), this shall be expressed as an “1”.";
        }
        leaf atpcIsUp {
            type boolean {
                range 1..4;
            }
            config false;
            description "If ATPC is currently actually working (not just configured), this shall be expressed as an “1”.";
        }
        leaf autoFreqSelectIsUp {
            type boolean {
                range 1..4;
            }
            config false;
            description "If automated frequency selection is currently actually working (not just configured), this shall be expressed as an “1”.";
        }
        leaf loopBackIsUp {
            type boolean {
                range 1..4;
            }
            config false;
            description "If loop back of the air interface header is currently active (not just configured), this shall be expressed as an “1”.";
        }
    }
    list AirInterfaceCurrentProblem {
        config true;
        ordered-by system;
        uses AirInterfaceCurrentProblem;
    }
    grouping AirInterfaceCurrentProblem {
        container problem {
            uses MicrowaveModel-TypeDefinitions:airInterfaceProblemType;
        }
    }
    list AirInterfaceCurrentPerformance {
        config true;
        ordered-by system;
        uses AirInterfaceCurrentPerformance;
    }
    grouping AirInterfaceCurrentPerformance {
    }
    list AirInterfaceHistoricalPerformance {
        config true;
        ordered-by system;
        uses AirInterfaceHistoricalPerformance;
    }
    grouping AirInterfaceHistoricalPerformance {
        leaf es {
            type uint64;
            config false;
            description "Number of errored seconds.";
        }
        leaf ses {
            type uint64;
            config false;
            description "Number of severely errored seconds.";
        }
        leaf cses {
            type uint64;
            config false;
            description "Number of consecutive severely errored seconds.";
        }
        leaf unavailability {
            type uint64;
            config false;
            description "Total time of unavailability in seconds.";
        }
        leaf txLevelMin {
            type uint8 {
                range 1..4;
            }
            config false;
            description "Minimum transmit power in dBm. Signed integers are required.";
        }
        leaf txLevelMax {
            type uint8 {
                range 1..4;
            }
            config false;
            description "Maximum transmit power in dBm. Signed integers are required.";
        }
        leaf txLevelAvg {
            type uint8 {
                range 1..4;
            }
            config false;
            description "Average transmit power in dBm. Signed integers are required.";
        }
        leaf rxLevelMin {
            type uint8 {
                range 1..4;
            }
            config false;
            description "Minimum receive level in dBm. Signed integers are required.";
        }
        leaf rxLevelMax {
            type uint8 {
                range 1..4;
            }
            config false;
            description "Maximum receive level in dBm. Signed integers are required.";
        }
        leaf rxLevelAvg {
            type uint8 {
                range 1..4;
            }
            config false;
            description "Average receive level in dBm. Signed integers are required.";
        }
        leaf time2Symbols {
            type uint64;
            config false;
            description "Sum of all seconds the transmitter operated in e.g. BPSC.";
        }
        leaf time4SymbolsS {
            type uint64;
            config false;
            description "Sum of all seconds the transmitter operated in e.g. 4QAM strong.";
        }
        leaf time4Symbols {
            type uint64;
            config false;
            description "Sum of all seconds the transmitter operated in e.g. 4QAM.";
        }
        leaf time8Symbols {
            type uint64;
            config false;
            description "Sum of all seconds the transmitter operated in e.g. 8QAM.";
        }
        leaf time16SymbolsS {
            type uint64;
            config false;
            description "Sum of all seconds the transmitter operated in e.g. 16QAM strong.";
        }
        leaf time16Symbols {
            type uint64;
            config false;
            description "Sum of all seconds the transmitter operated in e.g. 16QAM.";
        }
        leaf time32Symbols {
            type uint64;
            config false;
            description "Sum of all seconds the transmitter operated in e.g. 32QAM.";
        }
        leaf time64Symbols {
            type uint64;
            config false;
            description "Sum of all seconds the transmitter operated in e.g. 64QAM.";
        }
        leaf time128Symbols {
            type uint64;
            config false;
            description "Sum of all seconds the transmitter operated in e.g. 128QAM.";
        }
        leaf time256Symbols {
            type uint64;
            config false;
            description "Sum of all seconds the transmitter operated in e.g. 256QAM.";
        }
        leaf time512Symbols {
            type uint64;
            config false;
            description "Sum of all seconds the transmitter operated in e.g. 512QAM.";
        }
        leaf time512SymbolsL {
            type uint64;
            config false;
            description "Sum of all seconds the transmitter operated in e.g. 512QAM light.";
        }
        leaf time1024Symbols {
            type uint64;
            config false;
            description "Sum of all seconds the transmitter operated in e.g. 1024QAM.";
        }
        leaf time1024SymbolsL {
            type uint64;
            config false;
            description "Sum of all seconds the transmitter operated in e.g. 1024QAM light.";
        }
        leaf time2048Symbols {
            type uint64;
            config false;
            description "Sum of all seconds the transmitter operated in e.g. 2048QAM.";
        }
        leaf time2048SymbolsL {
            type uint64;
            config false;
            description "Sum of all seconds the transmitter operated in e.g. 2048QAM light.";
        }
        leaf time4096Symbols {
            type uint64;
            config false;
            description "Sum of all seconds the transmitter operated in e.g. 4096QAM.";
        }
        leaf time4096SymbolsL {
            type uint64;
            config false;
            description "Sum of all seconds the transmitter operated in e.g.  4096QAM light.";
        }
        leaf time8192Symbols {
            type uint64;
            config false;
            description "Sum of all seconds the transmitter operated in e.g. 8192QAM.";
        }
        leaf time8192SymbolsL {
            type uint64;
            config false;
            description "Sum of all seconds the transmitter operated in e.g. 8192QAM light.";
        }
        leaf snrMin {
            type uint8 {
                range 1..4;
            }
            config false;
            description "Minimum signal to noise ratio in dB.";
        }
        leaf snrMax {
            type uint8 {
                range 1..4;
            }
            config false;
            description "Maximum signal to noise ratio in dB.";
        }
        leaf snrAvg {
            type uint8 {
                range 1..4;
            }
            config false;
            description "Average signal to noise ratio in dB.";
        }
        leaf xpdMin {
            type uint8 {
                range 1..4;
            }
            config false;
            description "Minimum cross polarization discrimination in dB.";
        }
        leaf xpdMax {
            type uint8 {
                range 1..4;
            }
            config false;
            description "Maximum cross polarization discrimination in dB.";
        }
        leaf xpdAvg {
            type uint8 {
                range 1..4;
            }
            config false;
            description "Average cross polarization discrimination in dB.";
        }
        leaf rxTempMin {
            type uint8 {
                range 1..4;
            }
            config false;
            description "Minimum temperature of RF power amplifier.";
        }
        leaf rxTempMax {
            type uint8 {
                range 1..4;
            }
            config false;
            description "Maximum temperature of RF power amplifier.";
        }
        leaf rxTempAvg {
            type uint8 {
                range 1..4;
            }
            config false;
            description "Average temperature of RF power amplifier.";
        }
        leaf defectBlocksSum {
            type uint16 {
                range 1..4;
            }
            config false;
            description "Total number of blocks that were defect after receiving and could not be corrected by the FEC.";
        }
        leaf timePeriod {
            type uint64;
            config false;
            description "Total length of the measurement period in seconds.";
        }
    }
}
