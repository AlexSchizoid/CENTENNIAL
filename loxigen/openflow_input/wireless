// Copyright 2014, Big Switch Networks, Inc.
//
// LoxiGen is licensed under the Eclipse Public License,
// version 1.0 (EPL), with the following special exception:
//
// LOXI Exception
//
// As a special exception to the terms of the EPL, you may
// distribute libraries generated by LoxiGen (LoxiGen Libraries)
// under the terms of your choice, provided that copyright and
// licensing notices generated by LoxiGen are not altered or removed
// from the LoxiGen Libraries and the notice provided below is (i)
// included in the LoxiGen Libraries, if distributed in source code
// form and (ii) included in any documentation for the LoxiGen
// Libraries, if distributed in binary form.
//
// Notice: "Copyright 2013, Big Switch Networks, Inc.
// This library was generated by the LoxiGen Compiler."
//
// You may not use this file except in compliance with the EPL or
// LOXI Exception. You may obtain a copy of the EPL at:
//
// http://www.eclipse.org/legal/epl-v10.html
//
// Unless required by applicable law or agreed to in writing,
// software distributed under the License is distributed on an "AS
// IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either
// express or implied. See the EPL for the specific language
// governing permissions and limitations under the EPL.

#version 4

enum ofp_wireless_transport_port_features {
    OFPWTPF_INTERFACE = 1,	/* Interface */
};

enum ofp_wireless_transport_interface_prop_param_flags {
    OFPWTIPPT_FLAG_CONFIG = 1 /* Set if the parameter is configurable */
};

struct ofp_wireless_transport_port_feature_header {
    uint16_t type;          /* OFPWTPF_. */
    uint16_t length;
};

/* Wireless Transport Interface Property Parameter Types. */
enum ofp_wireless_transport_interface_prop_param_types (wire_type=uint16_t) {
    OFPWTIPPT_TX_MAX_CAPACITY       = 1,    /* Tx maximum capacity*/
    OFPWTIPPT_TX_CURRENT_CAPACITY   = 2,    /* Tx current capacity*/
    OFPWTIPPT_RX_CURRENT_CAPACITY   = 3,    /* Rx current capacity */

    OFPWTIPPT_TX_POWER              = 4,    /* Transmit power */
    OFPWTIPPT_TX_MAX_POWER          = 5,    /* Maximum allowed transmit power */
    OFPWTIPPT_TX_MUTE               = 6,    /* Transmission mute */
    OFPWTIPPT_RSL                   = 7,    /* Received signal level */
    OFPWTIPPT_SINR                  = 8,    /* SINR */

    OFPWTIPPT_OPERATION_MODE        = 9,    /* Operation mode */
    OFPWTIPPT_PROPRIETARY           = 0x8000,/* Proprietary parameter */
};

enum ofp_wireless_transport_interface_config(wire_type=uint32_t, bitmask=True) {
    OFPWTIC_TX_MAX_CAPACITY       = 0x1,
    OFPWTIC_TX_POWER              = 0x8,
    OFPWTIC_TX_MAX_POWER          = 0x10,
    OFPWTIC_TX_MUTE               = 0x20,
    OFPWTIC_OPERATION_MODE        = 0x100,
};

enum ofp_wireless_transport_interface_state(wire_type=uint32_t, bitmask=True) {
    OFPWTIC_TX_MAX_CAPACITY       = 0x1,
    OFPWTIC_TX_CURRENT_CAPACITY   = 0x2,
    OFPWTIC_RX_CURRENT_CAPACITY   = 0x4,
    OFPWTIC_TX_POWER              = 0x8,
    OFPWTIC_TX_MAX_POWER          = 0x10,
    OFPWTIC_TX_MUTE               = 0x20,
    OFPWTIC_RSL                   = 0x40,
    OFPWTIC_SINR                  = 0x80,
    OFPWTIC_OPERATION_MODE        = 0x100,
    OFPWTIC_PROPRIETARY           = 0x10000000
};

struct of_wireless_tx_max_capacity : of_wireless_transport_interface_prop_param {
    uint16_t type == 1;
    uint16_t length;        /* Length of feature excluding padding */
    uint8_t flags;          /* OFPWTIPPT_FLAG_* */
    pad(3);
    uint64_t tx_max_capacity;
};

struct of_wireless_tx_current_capacity : of_wireless_transport_interface_prop_param {
    uint16_t type == 2;
    uint16_t length;        /* Length of feature excluding padding */
    uint8_t flags;          /* OFPWTIPPT_FLAG_* */
    pad(3);
    uint64_t tx_current_capacity;
};

struct of_wireless_rx_current_capacity : of_wireless_transport_interface_prop_param {
    uint16_t type == 3;
    uint16_t length;        /* Length of feature excluding padding */
    uint8_t flags;          /* OFPWTIPPT_FLAG_* */
    pad(3);
    uint64_t rx_current_capacity;
};

struct of_wireless_tx_power : of_wireless_transport_interface_prop_param {
    uint16_t type == 4;
    uint16_t length;        /* Length of feature excluding padding */
    uint8_t flags;          /* OFPWTIPPT_FLAG_* */
    pad(1);
    uint16_t tx_power;
};

struct of_wireless_tx_max_power : of_wireless_transport_interface_prop_param {
    uint16_t type == 5;
    uint16_t length;        /* Length of feature excluding padding */
    uint8_t flags;          /* OFPWTIPPT_FLAG_* */
    pad(1);
    uint16_t tx_max_power;
};

struct of_wireless_tx_mute : of_wireless_transport_interface_prop_param {
    uint16_t type == 6;
    uint16_t length;        /* Length of feature excluding padding */
    uint8_t flags;          /* OFPWTIPPT_FLAG_* */
    uint8_t tx_mute;
    uint16_t pad16;
};

struct of_wireless_rsl : of_wireless_transport_interface_prop_param {
    uint16_t type == 7;
    uint16_t length;        /* Length of feature excluding padding */
    uint8_t flags;          /* OFPWTIPPT_FLAG_* */
    pad(1);
    uint16_t rsl;
};

struct of_wireless_sinr : of_wireless_transport_interface_prop_param {
    uint16_t type == 8;
    uint16_t length;        /* Length of feature excluding padding */
    uint8_t flags;          /* OFPWTIPPT_FLAG_* */
    pad(1);
    uint16_t sinr;
};

struct of_wireless_operation_mode : of_wireless_transport_interface_prop_param {
    uint16_t type == 9;
    uint16_t length;        /* Length of feature excluding padding */
    uint8_t flags;          /* OFPWTIPPT_FLAG_* */
    uint8_t operation_mode;
    uint16_t pad16;
};

struct of_wireless_transport_interface {
    of_port_no_t port_no;
    uint16_t length;
    pad(2);
    of_mac_addr_t hw_addr;
    pad(2);
    of_port_name_t name;
    uint32_t config;
    uint32_t state;
    list(of_wireless_transport_interface_prop_t) properties;
};

struct of_wireless_transport_interface_prop {
    uint16_t type == 1; /* Set to OFPWTPF_INTERFACE */
    uint16_t length; 	/* Length of feature excluding padding*/
    pad(4);	            /* Align to 64 bits */
    list(of_wireless_transport_interface_prop_param_t) param_list;
};

struct of_wireless_transport_interface_prop_param {
    uint16_t type == ?;     /* Set to OFPWTIPPT_FLAG_CONFIG */
    uint16_t length;        /* Length of feature excluding padding */
    uint8_t flags; 	        /* OFPWTIPPT_FLAG_* */
};


struct of_wireless_experimenter_port : of_experimenter {
    uint8_t version;
    uint8_t type == 4;
    uint16_t length;
    uint32_t xid;
    uint32_t experimenter == 0xff000005;
    uint32_t exp_type == ?;
};


/* --------  Messages ------- */

struct of_wireless_experimenter_port_mod : of_wireless_experimenter_port  {
    uint8_t version;
    uint8_t type == 4;
    uint16_t length;
    uint32_t xid;
    uint32_t experimenter == 0xff000005;
    uint32_t exp_type == 16;
    of_port_no_t port_no;
    uint16_t lengths;
    pad(2);
    of_mac_addr_t hw_addr;
    pad(2);
    uint32_t config;
    uint32_t state;
    list(of_wireless_transport_interface_prop_t) properties;
};

struct of_wireless_experimenter_port_status : of_wireless_experimenter_port {
    uint8_t version;
    uint8_t type == 4;
    uint16_t length;
    uint32_t xid;
    uint32_t experimenter == 0xff000005;
    uint32_t exp_type == 12;
    enum ofp_port_reason reason;
    pad(7);
    list(of_wireless_transport_interface_t) interfaces;
};


struct of_wireless_multipart_ports_request : of_experimenter_stats_request {
    uint8_t version;
    uint8_t type == 18;
    uint16_t length;
    uint32_t xid;
    uint16_t stats_type == 0xffff;
    enum ofp_stats_request_flags flags;
    pad(4);
    uint32_t experimenter == 0xff000005;
    uint32_t subtype == 13;
};


struct of_wireless_multipart_ports_reply : of_experimenter_stats_reply {
    uint8_t version;
    uint8_t type == 19;
    uint16_t length;
    uint32_t xid;
    uint16_t stats_type == 0xffff;
    enum ofp_stats_reply_flags flags;
    pad(4);
    uint32_t experimenter == 0xff000005;
    uint32_t subtype == 13;
    list(of_wireless_transport_interface_t) interfaces;
};
